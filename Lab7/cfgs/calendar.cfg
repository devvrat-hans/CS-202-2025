{
  "file": "calendar.c",
  "blocks": [
    [
      0,
      [
        "#include<stdio.h> struct Date{"
      ]
    ],
    [
      1,
      [
        "int dd;",
        "int mm;",
        "int yy;",
        "};"
      ]
    ],
    [
      2,
      [
        "struct Date date;",
        "struct Remainder{"
      ]
    ],
    [
      3,
      [
        "int dd;",
        "int mm;",
        "char note[50];",
        "};"
      ]
    ],
    [
      4,
      [
        "struct Remainder R;",
        "int check_leapYear(int year){"
      ]
    ],
    [
      5,
      [
        "if(year % 400 == 0 || (year % 100!=0 && year % 4 ==0))"
      ]
    ],
    [
      6,
      [
        "return 1;"
      ]
    ],
    [
      7,
      [
        "return 0;"
      ]
    ],
    [
      8,
      [
        "}"
      ]
    ],
    [
      9,
      [
        "void increase_month(int *mm,  int *yy){"
      ]
    ],
    [
      10,
      [
        "++*mm;",
        "if(*mm > 12){"
      ]
    ],
    [
      11,
      [
        "++*yy;",
        "*mm = *mm - 12;",
        "}"
      ]
    ],
    [
      12,
      [
        "}"
      ]
    ],
    [
      13,
      [
        "void decrease_month(int *mm,  int *yy){"
      ]
    ],
    [
      14,
      [
        "--*mm;",
        "if(*mm < 1){"
      ]
    ],
    [
      15,
      [
        "--*yy;",
        "if(*yy<1600){"
      ]
    ],
    [
      16,
      [
        "printf(\"No record available\");",
        "return;"
      ]
    ],
    [
      17,
      [
        "}"
      ]
    ],
    [
      18,
      [
        "*mm = *mm + 12;",
        "}"
      ]
    ],
    [
      19,
      [
        "}"
      ]
    ],
    [
      20,
      [
        "int getNumberOfDays(int month,int year){"
      ]
    ],
    [
      21,
      [
        "switch(month){"
      ]
    ],
    [
      22,
      [
        "case 1 : return(31);",
        "case 2 : if(check_leapYear(year)==1)",
        "return(29);"
      ]
    ],
    [
      23,
      [
        "else"
      ]
    ],
    [
      24,
      [
        "return(28);"
      ]
    ],
    [
      25,
      [
        "case 3 : return(31);",
        "case 4 : return(30);",
        "case 5 : return(31);",
        "case 6 : return(30);",
        "case 7 : return(31);",
        "case 8 : return(31);",
        "case 9 : return(30);",
        "case 10: return(31);",
        "case 11: return(30);",
        "case 12: return(31);",
        "default: return(-1);",
        "}"
      ]
    ],
    [
      26,
      [
        "}"
      ]
    ],
    [
      27,
      [
        "char *getName(int day){"
      ]
    ],
    [
      28,
      [
        "switch(day){"
      ]
    ],
    [
      29,
      [
        "case 0 :return(\"Sunday\");",
        "case 1 :return(\"Monday\");",
        "case 2 :return(\"Tuesday\");",
        "case 3 :return(\"Wednesday\");",
        "case 4 :return(\"Thursday\");",
        "case 5 :return(\"Friday\");",
        "case 6 :return(\"Saturday\");",
        "default:return(\"Error in getName() module.Invalid argument passed\");",
        "}"
      ]
    ],
    [
      30,
      [
        "}"
      ]
    ],
    [
      31,
      [
        "void print_date(int mm, int yy){"
      ]
    ],
    [
      32,
      [
        "printf(\"---------------------------\\n\");",
        "switch(mm){"
      ]
    ],
    [
      33,
      [
        "case 1: printf(\"January\"); break;",
        "case 2: printf(\"February\"); break;",
        "case 3: printf(\"March\"); break;",
        "case 4: printf(\"April\"); break;",
        "case 5: printf(\"May\"); break;",
        "case 6: printf(\"June\"); break;",
        "case 7: printf(\"July\"); break;",
        "case 8: printf(\"August\"); break;",
        "case 9: printf(\"September\"); break;",
        "case 10: printf(\"October\"); break;",
        "case 11: printf(\"November\"); break;",
        "case 12: printf(\"December\"); break;",
        "}"
      ]
    ],
    [
      34,
      [
        "printf(\" , %d\", yy);",
        "printf(\"\\n---------------------------\\n\");",
        "}"
      ]
    ],
    [
      35,
      [
        "int getDayNumber(int day,int mon,int year){"
      ]
    ],
    [
      36,
      [
        "int res = 0, t1, t2, y = year;",
        "year = year - 1600;",
        "while(year >= 100){"
      ]
    ],
    [
      37,
      [
        "res = res + 5;",
        "year = year - 100;",
        "}"
      ]
    ],
    [
      38,
      [
        "res = (res % 7);",
        "t1 = ((year - 1) / 4);",
        "t2 = (year-1)-t1;",
        "t1 = (t1*2)+t2;",
        "t1 = (t1%7);",
        "res = res + t1;",
        "res = res%7;",
        "t2 = 0;",
        "for(t1 = 1;t1 < mon; t1++){"
      ]
    ],
    [
      39,
      [
        "t2 += getNumberOfDays(t1,y);",
        "}"
      ]
    ],
    [
      40,
      [
        "t2 = t2 + day;",
        "t2 = t2 % 7;",
        "res = res + t2;",
        "res = res % 7;",
        "if(y > 2000)"
      ]
    ],
    [
      41,
      [
        "res = res + 1;",
        "res = res % 7;",
        "return res;"
      ]
    ],
    [
      42,
      [
        "}"
      ]
    ],
    [
      43,
      [
        "char *getDay(int dd,int mm,int yy){"
      ]
    ],
    [
      44,
      [
        "int day;",
        "if(!(mm>=1 && mm<=12)){"
      ]
    ],
    [
      45,
      [
        "return(\"Invalid month value\");"
      ]
    ],
    [
      46,
      [
        "}"
      ]
    ],
    [
      47,
      [
        "if(!(dd>=1 && dd<=getNumberOfDays(mm,yy))){"
      ]
    ],
    [
      48,
      [
        "return(\"Invalid date\");"
      ]
    ],
    [
      49,
      [
        "}"
      ]
    ],
    [
      50,
      [
        "if(yy>=1600){"
      ]
    ],
    [
      51,
      [
        "day = getDayNumber(dd,mm,yy);",
        "day = day%7;",
        "return(getName(day));"
      ]
    ],
    [
      52,
      [
        "}else{"
      ]
    ],
    [
      53,
      [
        "return(\"Please give year more than 1600\");"
      ]
    ],
    [
      54,
      [
        "}"
      ]
    ],
    [
      55,
      [
        "}"
      ]
    ],
    [
      56,
      [
        "int checkNote(int dd, int mm){"
      ]
    ],
    [
      57,
      [
        "FILE *fp;",
        "fp = fopen(\"note.dat\",\"rb\");",
        "if(fp == NULL){"
      ]
    ],
    [
      58,
      [
        "printf(\"Error in Opening the file\");",
        "}"
      ]
    ],
    [
      59,
      [
        "while(fread(&R,sizeof(R),1,fp) == 1){"
      ]
    ],
    [
      60,
      [
        "if(R.dd == dd && R.mm == mm){"
      ]
    ],
    [
      61,
      [
        "fclose(fp);",
        "return 1;"
      ]
    ],
    [
      62,
      [
        "}"
      ]
    ],
    [
      63,
      [
        "}"
      ]
    ],
    [
      64,
      [
        "fclose(fp);",
        "return 0;"
      ]
    ],
    [
      65,
      [
        "}"
      ]
    ],
    [
      66,
      [
        "void printMonth(int mon,int year,int x,int y){"
      ]
    ],
    [
      67,
      [
        "int nod, day, cnt, d = 1, x1 = x, y1 = y, isNote = 0;",
        "if(!(mon>=1 && mon<=12)){"
      ]
    ],
    [
      68,
      [
        "printf(\"INVALID MONTH\");",
        "return;"
      ]
    ],
    [
      69,
      [
        "}"
      ]
    ],
    [
      70,
      [
        "if(!(year>=1600)){"
      ]
    ],
    [
      71,
      [
        "printf(\"INVALID YEAR\");",
        "return;"
      ]
    ],
    [
      72,
      [
        "}"
      ]
    ],
    [
      73,
      [
        "print_date(mon,year);",
        "printf(\"S   M   T   W   T   F   S   \\n\");",
        "nod = getNumberOfDays(mon,year);",
        "day = getDayNumber(d,mon,year);",
        "switch(day){"
      ]
    ],
    [
      74,
      [
        "case 0 :",
        "x=x;",
        "cnt=1;",
        "break;"
      ]
    ],
    [
      75,
      [
        "case 1 :",
        "x=x+4;",
        "cnt=2;",
        "break;"
      ]
    ],
    [
      76,
      [
        "case 2 :",
        "x=x+8;",
        "cnt=3;",
        "break;"
      ]
    ],
    [
      77,
      [
        "case 3 :",
        "x=x+12;",
        "cnt=4;",
        "break;"
      ]
    ],
    [
      78,
      [
        "case 4 :",
        "x=x+16;",
        "cnt=5;",
        "break;"
      ]
    ],
    [
      79,
      [
        "case 5 :",
        "x=x+20;",
        "cnt=6;",
        "break;"
      ]
    ],
    [
      80,
      [
        "case 6 :",
        "x=x+24;",
        "cnt=7;",
        "break;"
      ]
    ],
    [
      81,
      [
        "default :",
        "printf(\"INVALID DATA FROM THE getOddNumber()MODULE\");",
        "return;"
      ]
    ],
    [
      82,
      [
        "}"
      ]
    ],
    [
      83,
      [
        "if(checkNote(d,mon)==1){"
      ]
    ],
    [
      84,
      [
        "printf(\"*\");",
        "}"
      ]
    ],
    [
      85,
      [
        "printf(\"%02d\",d);",
        "for(d=2;d<=nod;d++){"
      ]
    ],
    [
      86,
      [
        "if(cnt%7==0){"
      ]
    ],
    [
      87,
      [
        "printf(\"\\n\");",
        "cnt=0;",
        "x=x1-4;",
        "}"
      ]
    ],
    [
      88,
      [
        "x = x+4;",
        "cnt++;",
        "if(checkNote(d,mon)==1){"
      ]
    ],
    [
      89,
      [
        "printf(\"*\");",
        "}"
      ]
    ],
    [
      90,
      [
        "printf(\"%02d \",d);",
        "}"
      ]
    ],
    [
      91,
      [
        "printf(\"\\nPress 'n' to Next, Press 'p' to Previous and 'q' to Quit\\n\");",
        "printf(\"Red Background indicates the NOTE, Press 's' to see note: \\n\");",
        "}"
      ]
    ],
    [
      92,
      [
        "void AddNote(){"
      ]
    ],
    [
      93,
      [
        "FILE *fp;",
        "fp = fopen(\"note.dat\",\"ab+\");",
        "printf(\"Enter the date(DD/MM): \");",
        "scanf(\"%d%d\",&R.dd, &R.mm);",
        "printf(\"Enter the Note(50 character max): \");",
        "fflush(stdin);",
        "scanf(\"%[^\\n]\",R.note);",
        "if(fwrite(&R,sizeof(R),1,fp)){"
      ]
    ],
    [
      94,
      [
        "puts(\"Note is saved sucessfully\");",
        "fclose(fp);",
        "}else{"
      ]
    ],
    [
      95,
      [
        "puts(\"Fail to save!!\");",
        "}"
      ]
    ],
    [
      96,
      [
        "printf(\"Press any key............\");",
        "fclose(fp);",
        "}"
      ]
    ],
    [
      97,
      [
        "void showNote(int mm){"
      ]
    ],
    [
      98,
      [
        "FILE *fp;",
        "int i = 0, isFound = 0;",
        "fp = fopen(\"note.dat\",\"rb\");",
        "if(fp == NULL){"
      ]
    ],
    [
      99,
      [
        "printf(\"Error in opening the file\");",
        "}"
      ]
    ],
    [
      100,
      [
        "while(fread(&R,sizeof(R),1,fp) == 1){"
      ]
    ],
    [
      101,
      [
        "if(R.mm == mm){"
      ]
    ],
    [
      102,
      [
        "printf(\"Note %d Day = %d: %s\\n\", i+1, R.dd,  R.note);",
        "isFound = 1;",
        "i++;",
        "}"
      ]
    ],
    [
      103,
      [
        "}"
      ]
    ],
    [
      104,
      [
        "if(isFound == 0){"
      ]
    ],
    [
      105,
      [
        "printf(\"This Month contains no note\\n\");",
        "}"
      ]
    ],
    [
      106,
      [
        "printf(\"Press any key to back.......\\n\");",
        "}"
      ]
    ],
    [
      107,
      [
        "int main(){"
      ]
    ],
    [
      108,
      [
        "int choice;",
        "char ch = 'a';",
        "while(1){"
      ]
    ],
    [
      109,
      [
        "printf(\"1. Find Out the Day\\n\");",
        "printf(\"2. Print all the day of month\\n\");",
        "printf(\"3. Add Note\\n\");",
        "printf(\"4. EXIT\\n\");",
        "printf(\"ENTER YOUR CHOICE : \");",
        "scanf(\"%d\",&choice);",
        "switch(choice){"
      ]
    ],
    [
      110,
      [
        "case 1:",
        "printf(\"Enter date (DD MM YYYY) : \");",
        "scanf(\"%d %d %d\",&date.dd,&date.mm,&date.yy);",
        "printf(\"Day is : %s\",getDay(date.dd,date.mm,date.yy));",
        "printf(\"\\nPress any key to continue......\");",
        "break;"
      ]
    ],
    [
      111,
      [
        "case 2 :",
        "printf(\"Enter month and year (MM YYYY) : \");",
        "scanf(\"%d %d\",&date.mm,&date.yy);",
        "while(ch!='q'){"
      ]
    ],
    [
      112,
      [
        "printMonth(date.mm,date.yy,20,5);",
        "scanf(\"%c\", &ch);",
        "if(ch == 'n'){"
      ]
    ],
    [
      113,
      [
        "increase_month(&date.mm,&date.yy);",
        "printMonth(date.mm,date.yy,20,5);",
        "}else if(ch == 'p'){"
      ]
    ],
    [
      114,
      [
        "decrease_month(&date.mm,&date.yy);",
        "printMonth(date.mm,date.yy,20,5);",
        "}else if(ch == 's'){"
      ]
    ],
    [
      115,
      [
        "showNote(date.mm);",
        "}"
      ]
    ],
    [
      116,
      [
        "}"
      ]
    ],
    [
      117,
      [
        "break;"
      ]
    ],
    [
      118,
      [
        "case 3:",
        "AddNote();",
        "break;"
      ]
    ],
    [
      119,
      [
        "case 4 :",
        "return 0;"
      ]
    ],
    [
      120,
      [
        "}"
      ]
    ],
    [
      121,
      [
        "}"
      ]
    ],
    [
      122,
      [
        "return 0;"
      ]
    ],
    [
      123,
      [
        "}"
      ]
    ]
  ],
  "edges": [
    [
      0,
      1,
      ""
    ],
    [
      1,
      2,
      ""
    ],
    [
      2,
      3,
      ""
    ],
    [
      3,
      4,
      ""
    ],
    [
      4,
      5,
      ""
    ],
    [
      5,
      6,
      "true"
    ],
    [
      5,
      23,
      "false"
    ],
    [
      8,
      9,
      ""
    ],
    [
      9,
      10,
      ""
    ],
    [
      10,
      11,
      "true"
    ],
    [
      10,
      23,
      "false"
    ],
    [
      11,
      12,
      ""
    ],
    [
      12,
      13,
      ""
    ],
    [
      13,
      14,
      ""
    ],
    [
      14,
      15,
      "true"
    ],
    [
      14,
      23,
      "false"
    ],
    [
      15,
      16,
      "true"
    ],
    [
      15,
      23,
      "false"
    ],
    [
      17,
      18,
      ""
    ],
    [
      18,
      19,
      ""
    ],
    [
      19,
      20,
      ""
    ],
    [
      20,
      21,
      ""
    ],
    [
      21,
      22,
      ""
    ],
    [
      23,
      24,
      ""
    ],
    [
      25,
      26,
      ""
    ],
    [
      26,
      27,
      ""
    ],
    [
      27,
      28,
      ""
    ],
    [
      28,
      29,
      ""
    ],
    [
      29,
      30,
      ""
    ],
    [
      30,
      31,
      ""
    ],
    [
      31,
      32,
      ""
    ],
    [
      32,
      33,
      ""
    ],
    [
      33,
      34,
      ""
    ],
    [
      34,
      35,
      ""
    ],
    [
      35,
      36,
      ""
    ],
    [
      36,
      37,
      "true"
    ],
    [
      36,
      38,
      "false"
    ],
    [
      36,
      40,
      "false"
    ],
    [
      36,
      47,
      "false"
    ],
    [
      36,
      50,
      "false"
    ],
    [
      36,
      55,
      "false"
    ],
    [
      36,
      59,
      "false"
    ],
    [
      36,
      64,
      "false"
    ],
    [
      36,
      70,
      "false"
    ],
    [
      36,
      73,
      "false"
    ],
    [
      36,
      83,
      "false"
    ],
    [
      36,
      85,
      "false"
    ],
    [
      36,
      91,
      "false"
    ],
    [
      36,
      96,
      "false"
    ],
    [
      36,
      100,
      "false"
    ],
    [
      36,
      104,
      "false"
    ],
    [
      36,
      106,
      "false"
    ],
    [
      36,
      122,
      "false"
    ],
    [
      37,
      38,
      ""
    ],
    [
      38,
      39,
      "true"
    ],
    [
      38,
      40,
      "false"
    ],
    [
      38,
      47,
      "false"
    ],
    [
      38,
      50,
      "false"
    ],
    [
      38,
      55,
      "false"
    ],
    [
      38,
      59,
      "false"
    ],
    [
      38,
      64,
      "false"
    ],
    [
      38,
      70,
      "false"
    ],
    [
      38,
      73,
      "false"
    ],
    [
      38,
      83,
      "false"
    ],
    [
      38,
      85,
      "false"
    ],
    [
      38,
      91,
      "false"
    ],
    [
      38,
      96,
      "false"
    ],
    [
      38,
      100,
      "false"
    ],
    [
      38,
      104,
      "false"
    ],
    [
      38,
      106,
      "false"
    ],
    [
      38,
      122,
      "false"
    ],
    [
      39,
      40,
      ""
    ],
    [
      40,
      41,
      "true"
    ],
    [
      40,
      52,
      "false"
    ],
    [
      42,
      43,
      ""
    ],
    [
      43,
      44,
      ""
    ],
    [
      44,
      45,
      "true"
    ],
    [
      44,
      52,
      "false"
    ],
    [
      46,
      47,
      ""
    ],
    [
      47,
      48,
      "true"
    ],
    [
      47,
      52,
      "false"
    ],
    [
      49,
      50,
      ""
    ],
    [
      50,
      51,
      "true"
    ],
    [
      50,
      52,
      "false"
    ],
    [
      52,
      53,
      ""
    ],
    [
      54,
      55,
      ""
    ],
    [
      55,
      56,
      ""
    ],
    [
      56,
      57,
      ""
    ],
    [
      57,
      58,
      "true"
    ],
    [
      57,
      94,
      "false"
    ],
    [
      58,
      59,
      ""
    ],
    [
      59,
      60,
      "true"
    ],
    [
      59,
      64,
      "false"
    ],
    [
      59,
      70,
      "false"
    ],
    [
      59,
      73,
      "false"
    ],
    [
      59,
      83,
      "false"
    ],
    [
      59,
      85,
      "false"
    ],
    [
      59,
      91,
      "false"
    ],
    [
      59,
      96,
      "false"
    ],
    [
      59,
      100,
      "false"
    ],
    [
      59,
      104,
      "false"
    ],
    [
      59,
      106,
      "false"
    ],
    [
      59,
      122,
      "false"
    ],
    [
      60,
      61,
      "true"
    ],
    [
      60,
      94,
      "false"
    ],
    [
      62,
      63,
      ""
    ],
    [
      63,
      64,
      ""
    ],
    [
      65,
      66,
      ""
    ],
    [
      66,
      67,
      ""
    ],
    [
      67,
      68,
      "true"
    ],
    [
      67,
      94,
      "false"
    ],
    [
      69,
      70,
      ""
    ],
    [
      70,
      71,
      "true"
    ],
    [
      70,
      94,
      "false"
    ],
    [
      72,
      73,
      ""
    ],
    [
      73,
      74,
      ""
    ],
    [
      82,
      83,
      ""
    ],
    [
      83,
      84,
      "true"
    ],
    [
      83,
      94,
      "false"
    ],
    [
      84,
      85,
      ""
    ],
    [
      85,
      86,
      "true"
    ],
    [
      85,
      91,
      "false"
    ],
    [
      85,
      96,
      "false"
    ],
    [
      85,
      100,
      "false"
    ],
    [
      85,
      104,
      "false"
    ],
    [
      85,
      106,
      "false"
    ],
    [
      85,
      122,
      "false"
    ],
    [
      86,
      87,
      "true"
    ],
    [
      86,
      94,
      "false"
    ],
    [
      87,
      88,
      ""
    ],
    [
      88,
      89,
      "true"
    ],
    [
      88,
      94,
      "false"
    ],
    [
      89,
      90,
      ""
    ],
    [
      90,
      91,
      ""
    ],
    [
      91,
      92,
      ""
    ],
    [
      92,
      93,
      ""
    ],
    [
      93,
      94,
      "true"
    ],
    [
      93,
      113,
      "false"
    ],
    [
      94,
      95,
      ""
    ],
    [
      95,
      96,
      ""
    ],
    [
      96,
      97,
      ""
    ],
    [
      97,
      98,
      ""
    ],
    [
      98,
      99,
      "true"
    ],
    [
      98,
      113,
      "false"
    ],
    [
      99,
      100,
      ""
    ],
    [
      100,
      101,
      "true"
    ],
    [
      100,
      104,
      "false"
    ],
    [
      100,
      106,
      "false"
    ],
    [
      100,
      122,
      "false"
    ],
    [
      101,
      102,
      "true"
    ],
    [
      101,
      113,
      "false"
    ],
    [
      102,
      103,
      ""
    ],
    [
      103,
      104,
      ""
    ],
    [
      104,
      105,
      "true"
    ],
    [
      104,
      113,
      "false"
    ],
    [
      105,
      106,
      ""
    ],
    [
      106,
      107,
      ""
    ],
    [
      107,
      108,
      ""
    ],
    [
      108,
      109,
      "true"
    ],
    [
      108,
      122,
      "false"
    ],
    [
      109,
      110,
      ""
    ],
    [
      111,
      112,
      "true"
    ],
    [
      111,
      117,
      "false"
    ],
    [
      112,
      113,
      "true"
    ],
    [
      112,
      114,
      "false"
    ],
    [
      113,
      114,
      ""
    ],
    [
      114,
      115,
      ""
    ],
    [
      115,
      116,
      ""
    ],
    [
      116,
      117,
      ""
    ],
    [
      120,
      121,
      ""
    ],
    [
      121,
      122,
      ""
    ]
  ],
  "total_blocks": 124,
  "total_edges": 171
}