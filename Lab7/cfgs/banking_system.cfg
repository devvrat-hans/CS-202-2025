{
  "file": "banking_system.c",
  "blocks": [
    [
      0,
      [
        "#include <stdio.h> #include <stdlib.h> #include <string.h> #define MAX_ACCOUNTS 100 #define MAX_NAME_LENGTH 50 typedef struct {"
      ]
    ],
    [
      1,
      [
        "int account_number;",
        "char name[MAX_NAME_LENGTH];",
        "double balance;",
        "int is_active;",
        "} Account;"
      ]
    ],
    [
      2,
      [
        "Account accounts[MAX_ACCOUNTS];",
        "int total_accounts = 0;",
        "void display_menu() {"
      ]
    ],
    [
      3,
      [
        "printf(\"\\n=== BANKING SYSTEM ===\\n\");",
        "printf(\"1. Create Account\\n\");",
        "printf(\"2. Deposit Money\\n\");",
        "printf(\"3. Withdraw Money\\n\");",
        "printf(\"4. Check Balance\\n\");",
        "printf(\"5. Transfer Money\\n\");",
        "printf(\"6. Display All Accounts\\n\");",
        "printf(\"7. Close Account\\n\");",
        "printf(\"8. Calculate Interest\\n\");",
        "printf(\"9. Exit\\n\");",
        "printf(\"Enter your choice: \");",
        "}"
      ]
    ],
    [
      4,
      [
        "int find_account(int account_number) {"
      ]
    ],
    [
      5,
      [
        "int i = 0;",
        "int found_index = -1;",
        "while (i < total_accounts) {"
      ]
    ],
    [
      6,
      [
        "if (accounts[i].account_number == account_number && accounts[i].is_active == 1) {"
      ]
    ],
    [
      7,
      [
        "found_index = i;",
        "break;"
      ]
    ],
    [
      8,
      [
        "}"
      ]
    ],
    [
      9,
      [
        "i = i + 1;",
        "}"
      ]
    ],
    [
      10,
      [
        "return found_index;"
      ]
    ],
    [
      11,
      [
        "}"
      ]
    ],
    [
      12,
      [
        "void create_account() {"
      ]
    ],
    [
      13,
      [
        "int account_number;",
        "char name[MAX_NAME_LENGTH];",
        "double initial_deposit;",
        "int valid_account = 1;",
        "if (total_accounts >= MAX_ACCOUNTS) {"
      ]
    ],
    [
      14,
      [
        "printf(\"Maximum account limit reached!\\n\");",
        "return;"
      ]
    ],
    [
      15,
      [
        "}"
      ]
    ],
    [
      16,
      [
        "printf(\"Enter account number: \");",
        "scanf(\"%d\", &account_number);",
        "int existing_index = find_account(account_number);",
        "if (existing_index != -1) {"
      ]
    ],
    [
      17,
      [
        "printf(\"Account already exists!\\n\");",
        "valid_account = 0;",
        "}"
      ]
    ],
    [
      18,
      [
        "if (valid_account == 1) {"
      ]
    ],
    [
      19,
      [
        "printf(\"Enter account holder name: \");",
        "scanf(\"%s\", name);",
        "printf(\"Enter initial deposit: \");",
        "scanf(\"%lf\", &initial_deposit);",
        "if (initial_deposit < 100.0) {"
      ]
    ],
    [
      20,
      [
        "printf(\"Minimum initial deposit is $100\\n\");",
        "valid_account = 0;",
        "}"
      ]
    ],
    [
      21,
      [
        "}"
      ]
    ],
    [
      22,
      [
        "if (valid_account == 1) {"
      ]
    ],
    [
      23,
      [
        "accounts[total_accounts].account_number = account_number;",
        "strcpy(accounts[total_accounts].name, name);",
        "accounts[total_accounts].balance = initial_deposit;",
        "accounts[total_accounts].is_active = 1;",
        "total_accounts = total_accounts + 1;",
        "printf(\"Account created successfully!\\n\");",
        "printf(\"Account Number: %d\\n\", account_number);",
        "printf(\"Account Holder: %s\\n\", name);",
        "printf(\"Initial Balance: $%.2f\\n\", initial_deposit);",
        "}"
      ]
    ],
    [
      24,
      [
        "}"
      ]
    ],
    [
      25,
      [
        "void deposit_money() {"
      ]
    ],
    [
      26,
      [
        "int account_number;",
        "double deposit_amount;",
        "int account_index;",
        "printf(\"Enter account number: \");",
        "scanf(\"%d\", &account_number);",
        "account_index = find_account(account_number);",
        "if (account_index == -1) {"
      ]
    ],
    [
      27,
      [
        "printf(\"Account not found or inactive!\\n\");",
        "return;"
      ]
    ],
    [
      28,
      [
        "}"
      ]
    ],
    [
      29,
      [
        "printf(\"Enter deposit amount: \");",
        "scanf(\"%lf\", &deposit_amount);",
        "if (deposit_amount <= 0) {"
      ]
    ],
    [
      30,
      [
        "printf(\"Invalid deposit amount!\\n\");",
        "return;"
      ]
    ],
    [
      31,
      [
        "}"
      ]
    ],
    [
      32,
      [
        "accounts[account_index].balance = accounts[account_index].balance + deposit_amount;",
        "printf(\"Deposit successful!\\n\");",
        "printf(\"New Balance: $%.2f\\n\", accounts[account_index].balance);",
        "}"
      ]
    ],
    [
      33,
      [
        "void withdraw_money() {"
      ]
    ],
    [
      34,
      [
        "int account_number;",
        "double withdraw_amount;",
        "int account_index;",
        "double new_balance;",
        "printf(\"Enter account number: \");",
        "scanf(\"%d\", &account_number);",
        "account_index = find_account(account_number);",
        "if (account_index == -1) {"
      ]
    ],
    [
      35,
      [
        "printf(\"Account not found or inactive!\\n\");",
        "return;"
      ]
    ],
    [
      36,
      [
        "}"
      ]
    ],
    [
      37,
      [
        "printf(\"Current Balance: $%.2f\\n\", accounts[account_index].balance);",
        "printf(\"Enter withdrawal amount: \");",
        "scanf(\"%lf\", &withdraw_amount);",
        "if (withdraw_amount <= 0) {"
      ]
    ],
    [
      38,
      [
        "printf(\"Invalid withdrawal amount!\\n\");",
        "return;"
      ]
    ],
    [
      39,
      [
        "}"
      ]
    ],
    [
      40,
      [
        "new_balance = accounts[account_index].balance - withdraw_amount;",
        "if (new_balance < 50.0) {"
      ]
    ],
    [
      41,
      [
        "printf(\"Insufficient funds! Minimum balance of $50 required.\\n\");",
        "return;"
      ]
    ],
    [
      42,
      [
        "}"
      ]
    ],
    [
      43,
      [
        "accounts[account_index].balance = new_balance;",
        "printf(\"Withdrawal successful!\\n\");",
        "printf(\"New Balance: $%.2f\\n\", accounts[account_index].balance);",
        "}"
      ]
    ],
    [
      44,
      [
        "void check_balance() {"
      ]
    ],
    [
      45,
      [
        "int account_number;",
        "int account_index;",
        "printf(\"Enter account number: \");",
        "scanf(\"%d\", &account_number);",
        "account_index = find_account(account_number);",
        "if (account_index == -1) {"
      ]
    ],
    [
      46,
      [
        "printf(\"Account not found or inactive!\\n\");",
        "return;"
      ]
    ],
    [
      47,
      [
        "}"
      ]
    ],
    [
      48,
      [
        "printf(\"Account Number: %d\\n\", accounts[account_index].account_number);",
        "printf(\"Account Holder: %s\\n\", accounts[account_index].name);",
        "printf(\"Current Balance: $%.2f\\n\", accounts[account_index].balance);",
        "}"
      ]
    ],
    [
      49,
      [
        "void transfer_money() {"
      ]
    ],
    [
      50,
      [
        "int from_account, to_account;",
        "double transfer_amount;",
        "int from_index, to_index;",
        "double new_from_balance;",
        "printf(\"Enter source account number: \");",
        "scanf(\"%d\", &from_account);",
        "printf(\"Enter destination account number: \");",
        "scanf(\"%d\", &to_account);",
        "from_index = find_account(from_account);",
        "to_index = find_account(to_account);",
        "if (from_index == -1) {"
      ]
    ],
    [
      51,
      [
        "printf(\"Source account not found or inactive!\\n\");",
        "return;"
      ]
    ],
    [
      52,
      [
        "}"
      ]
    ],
    [
      53,
      [
        "if (to_index == -1) {"
      ]
    ],
    [
      54,
      [
        "printf(\"Destination account not found or inactive!\\n\");",
        "return;"
      ]
    ],
    [
      55,
      [
        "}"
      ]
    ],
    [
      56,
      [
        "if (from_account == to_account) {"
      ]
    ],
    [
      57,
      [
        "printf(\"Cannot transfer to the same account!\\n\");",
        "return;"
      ]
    ],
    [
      58,
      [
        "}"
      ]
    ],
    [
      59,
      [
        "printf(\"Enter transfer amount: \");",
        "scanf(\"%lf\", &transfer_amount);",
        "if (transfer_amount <= 0) {"
      ]
    ],
    [
      60,
      [
        "printf(\"Invalid transfer amount!\\n\");",
        "return;"
      ]
    ],
    [
      61,
      [
        "}"
      ]
    ],
    [
      62,
      [
        "new_from_balance = accounts[from_index].balance - transfer_amount;",
        "if (new_from_balance < 50.0) {"
      ]
    ],
    [
      63,
      [
        "printf(\"Insufficient funds in source account!\\n\");",
        "return;"
      ]
    ],
    [
      64,
      [
        "}"
      ]
    ],
    [
      65,
      [
        "accounts[from_index].balance = new_from_balance;",
        "accounts[to_index].balance = accounts[to_index].balance + transfer_amount;",
        "printf(\"Transfer successful!\\n\");",
        "printf(\"From Account %d: $%.2f\\n\", from_account, accounts[from_index].balance);",
        "printf(\"To Account %d: $%.2f\\n\", to_account, accounts[to_index].balance);",
        "}"
      ]
    ],
    [
      66,
      [
        "void display_all_accounts() {"
      ]
    ],
    [
      67,
      [
        "int i = 0;",
        "int active_count = 0;",
        "printf(\"\\n=== ALL ACTIVE ACCOUNTS ===\\n\");",
        "printf(\"%-10s %-20s %-15s\\n\", \"Acc No.\", \"Name\", \"Balance\");",
        "printf(\"-----------------------------------------------\\n\");",
        "while (i < total_accounts) {"
      ]
    ],
    [
      68,
      [
        "if (accounts[i].is_active == 1) {"
      ]
    ],
    [
      69,
      [
        "printf(\"%-10d %-20s $%-14.2f\\n\", accounts[i].account_number, accounts[i].name, accounts[i].balance);",
        "active_count = active_count + 1;",
        "}"
      ]
    ],
    [
      70,
      [
        "i = i + 1;",
        "}"
      ]
    ],
    [
      71,
      [
        "printf(\"-----------------------------------------------\\n\");",
        "printf(\"Total Active Accounts: %d\\n\", active_count);",
        "}"
      ]
    ],
    [
      72,
      [
        "void close_account() {"
      ]
    ],
    [
      73,
      [
        "int account_number;",
        "int account_index;",
        "char confirmation;",
        "printf(\"Enter account number to close: \");",
        "scanf(\"%d\", &account_number);",
        "account_index = find_account(account_number);",
        "if (account_index == -1) {"
      ]
    ],
    [
      74,
      [
        "printf(\"Account not found or already inactive!\\n\");",
        "return;"
      ]
    ],
    [
      75,
      [
        "}"
      ]
    ],
    [
      76,
      [
        "printf(\"Account Details:\\n\");",
        "printf(\"Account Number: %d\\n\", accounts[account_index].account_number);",
        "printf(\"Account Holder: %s\\n\", accounts[account_index].name);",
        "printf(\"Current Balance: $%.2f\\n\", accounts[account_index].balance);",
        "printf(\"Are you sure you want to close this account? (y/n): \");",
        "scanf(\" %c\", &confirmation);",
        "if (confirmation == 'y' || confirmation == 'Y') {"
      ]
    ],
    [
      77,
      [
        "accounts[account_index].is_active = 0;",
        "printf(\"Account closed successfully!\\n\");",
        "if (accounts[account_index].balance > 0) {"
      ]
    ],
    [
      78,
      [
        "printf(\"Please collect your remaining balance of $%.2f\\n\", accounts[account_index].balance);",
        "}"
      ]
    ],
    [
      79,
      [
        "} else {"
      ]
    ],
    [
      80,
      [
        "printf(\"Account closure cancelled.\\n\");",
        "}"
      ]
    ],
    [
      81,
      [
        "}"
      ]
    ],
    [
      82,
      [
        "void calculate_interest() {"
      ]
    ],
    [
      83,
      [
        "int i = 0;",
        "double interest_rate = 0.05;",
        "double total_interest = 0.0;",
        "double account_interest;",
        "printf(\"\\n=== INTEREST CALCULATION ===\\n\");",
        "printf(\"Annual Interest Rate: %.2f%%\\n\", interest_rate * 100);",
        "printf(\"%-10s %-20s %-15s %-15s\\n\", \"Acc No.\", \"Name\", \"Balance\", \"Interest\");",
        "printf(\"---------------------------------------------------------------\\n\");",
        "while (i < total_accounts) {"
      ]
    ],
    [
      84,
      [
        "if (accounts[i].is_active == 1 && accounts[i].balance > 0) {"
      ]
    ],
    [
      85,
      [
        "account_interest = accounts[i].balance * interest_rate;",
        "total_interest = total_interest + account_interest;",
        "printf(\"%-10d %-20s $%-14.2f $%-14.2f\\n\", accounts[i].account_number, accounts[i].name, accounts[i].balance, account_interest);",
        "}"
      ]
    ],
    [
      86,
      [
        "i = i + 1;",
        "}"
      ]
    ],
    [
      87,
      [
        "printf(\"---------------------------------------------------------------\\n\");",
        "printf(\"Total Interest Payable: $%.2f\\n\", total_interest);",
        "}"
      ]
    ],
    [
      88,
      [
        "int main() {"
      ]
    ],
    [
      89,
      [
        "int choice;",
        "int continue_program = 1;",
        "printf(\"Welcome to the Banking System!\\n\");",
        "while (continue_program == 1) {"
      ]
    ],
    [
      90,
      [
        "display_menu();",
        "scanf(\"%d\", &choice);",
        "if (choice == 1) {"
      ]
    ],
    [
      91,
      [
        "create_account();",
        "} else if (choice == 2) {"
      ]
    ],
    [
      92,
      [
        "deposit_money();",
        "} else if (choice == 3) {"
      ]
    ],
    [
      93,
      [
        "withdraw_money();",
        "} else if (choice == 4) {"
      ]
    ],
    [
      94,
      [
        "check_balance();",
        "} else if (choice == 5) {"
      ]
    ],
    [
      95,
      [
        "transfer_money();",
        "} else if (choice == 6) {"
      ]
    ],
    [
      96,
      [
        "display_all_accounts();",
        "} else if (choice == 7) {"
      ]
    ],
    [
      97,
      [
        "close_account();",
        "} else if (choice == 8) {"
      ]
    ],
    [
      98,
      [
        "calculate_interest();",
        "} else if (choice == 9) {"
      ]
    ],
    [
      99,
      [
        "printf(\"Thank you for using our Banking System!\\n\");",
        "continue_program = 0;"
      ]
    ],
    [
      100,
      [
        "} else {"
      ]
    ],
    [
      101,
      [
        "printf(\"Invalid choice! Please try again.\\n\");",
        "}"
      ]
    ],
    [
      102,
      [
        "if (continue_program == 1) {"
      ]
    ],
    [
      103,
      [
        "printf(\"\\nPress Enter to continue...\");",
        "getchar();",
        "getchar();",
        "}"
      ]
    ],
    [
      104,
      [
        "}"
      ]
    ],
    [
      105,
      [
        "return 0;"
      ]
    ],
    [
      106,
      [
        "}"
      ]
    ]
  ],
  "edges": [
    [
      0,
      1,
      ""
    ],
    [
      1,
      2,
      ""
    ],
    [
      2,
      3,
      ""
    ],
    [
      3,
      4,
      ""
    ],
    [
      4,
      5,
      ""
    ],
    [
      5,
      6,
      "true"
    ],
    [
      5,
      10,
      "false"
    ],
    [
      5,
      16,
      "false"
    ],
    [
      5,
      18,
      "false"
    ],
    [
      5,
      22,
      "false"
    ],
    [
      5,
      24,
      "false"
    ],
    [
      5,
      29,
      "false"
    ],
    [
      5,
      32,
      "false"
    ],
    [
      5,
      37,
      "false"
    ],
    [
      5,
      40,
      "false"
    ],
    [
      5,
      43,
      "false"
    ],
    [
      5,
      48,
      "false"
    ],
    [
      5,
      53,
      "false"
    ],
    [
      5,
      56,
      "false"
    ],
    [
      5,
      59,
      "false"
    ],
    [
      5,
      62,
      "false"
    ],
    [
      5,
      65,
      "false"
    ],
    [
      5,
      71,
      "false"
    ],
    [
      5,
      76,
      "false"
    ],
    [
      5,
      81,
      "false"
    ],
    [
      5,
      87,
      "false"
    ],
    [
      5,
      105,
      "false"
    ],
    [
      6,
      7,
      "true"
    ],
    [
      6,
      79,
      "false"
    ],
    [
      8,
      9,
      ""
    ],
    [
      9,
      10,
      ""
    ],
    [
      11,
      12,
      ""
    ],
    [
      12,
      13,
      ""
    ],
    [
      13,
      14,
      "true"
    ],
    [
      13,
      79,
      "false"
    ],
    [
      15,
      16,
      ""
    ],
    [
      16,
      17,
      "true"
    ],
    [
      16,
      79,
      "false"
    ],
    [
      17,
      18,
      ""
    ],
    [
      18,
      19,
      "true"
    ],
    [
      18,
      79,
      "false"
    ],
    [
      19,
      20,
      "true"
    ],
    [
      19,
      79,
      "false"
    ],
    [
      20,
      21,
      ""
    ],
    [
      21,
      22,
      ""
    ],
    [
      22,
      23,
      "true"
    ],
    [
      22,
      79,
      "false"
    ],
    [
      23,
      24,
      ""
    ],
    [
      24,
      25,
      ""
    ],
    [
      25,
      26,
      ""
    ],
    [
      26,
      27,
      "true"
    ],
    [
      26,
      79,
      "false"
    ],
    [
      28,
      29,
      ""
    ],
    [
      29,
      30,
      "true"
    ],
    [
      29,
      79,
      "false"
    ],
    [
      31,
      32,
      ""
    ],
    [
      32,
      33,
      ""
    ],
    [
      33,
      34,
      ""
    ],
    [
      34,
      35,
      "true"
    ],
    [
      34,
      79,
      "false"
    ],
    [
      36,
      37,
      ""
    ],
    [
      37,
      38,
      "true"
    ],
    [
      37,
      79,
      "false"
    ],
    [
      39,
      40,
      ""
    ],
    [
      40,
      41,
      "true"
    ],
    [
      40,
      79,
      "false"
    ],
    [
      42,
      43,
      ""
    ],
    [
      43,
      44,
      ""
    ],
    [
      44,
      45,
      ""
    ],
    [
      45,
      46,
      "true"
    ],
    [
      45,
      79,
      "false"
    ],
    [
      47,
      48,
      ""
    ],
    [
      48,
      49,
      ""
    ],
    [
      49,
      50,
      ""
    ],
    [
      50,
      51,
      "true"
    ],
    [
      50,
      79,
      "false"
    ],
    [
      52,
      53,
      ""
    ],
    [
      53,
      54,
      "true"
    ],
    [
      53,
      79,
      "false"
    ],
    [
      55,
      56,
      ""
    ],
    [
      56,
      57,
      "true"
    ],
    [
      56,
      79,
      "false"
    ],
    [
      58,
      59,
      ""
    ],
    [
      59,
      60,
      "true"
    ],
    [
      59,
      79,
      "false"
    ],
    [
      61,
      62,
      ""
    ],
    [
      62,
      63,
      "true"
    ],
    [
      62,
      79,
      "false"
    ],
    [
      64,
      65,
      ""
    ],
    [
      65,
      66,
      ""
    ],
    [
      66,
      67,
      ""
    ],
    [
      67,
      68,
      "true"
    ],
    [
      67,
      71,
      "false"
    ],
    [
      67,
      76,
      "false"
    ],
    [
      67,
      81,
      "false"
    ],
    [
      67,
      87,
      "false"
    ],
    [
      67,
      105,
      "false"
    ],
    [
      68,
      69,
      "true"
    ],
    [
      68,
      79,
      "false"
    ],
    [
      69,
      70,
      ""
    ],
    [
      70,
      71,
      ""
    ],
    [
      71,
      72,
      ""
    ],
    [
      72,
      73,
      ""
    ],
    [
      73,
      74,
      "true"
    ],
    [
      73,
      79,
      "false"
    ],
    [
      75,
      76,
      ""
    ],
    [
      76,
      77,
      "true"
    ],
    [
      76,
      79,
      "false"
    ],
    [
      77,
      78,
      "true"
    ],
    [
      77,
      79,
      "false"
    ],
    [
      78,
      79,
      ""
    ],
    [
      79,
      80,
      ""
    ],
    [
      80,
      81,
      ""
    ],
    [
      81,
      82,
      ""
    ],
    [
      82,
      83,
      ""
    ],
    [
      83,
      84,
      "true"
    ],
    [
      83,
      87,
      "false"
    ],
    [
      83,
      105,
      "false"
    ],
    [
      84,
      85,
      "true"
    ],
    [
      84,
      91,
      "false"
    ],
    [
      85,
      86,
      ""
    ],
    [
      86,
      87,
      ""
    ],
    [
      87,
      88,
      ""
    ],
    [
      88,
      89,
      ""
    ],
    [
      89,
      90,
      "true"
    ],
    [
      89,
      105,
      "false"
    ],
    [
      90,
      91,
      "true"
    ],
    [
      90,
      92,
      "false"
    ],
    [
      91,
      92,
      ""
    ],
    [
      92,
      93,
      ""
    ],
    [
      93,
      94,
      ""
    ],
    [
      94,
      95,
      ""
    ],
    [
      95,
      96,
      ""
    ],
    [
      96,
      97,
      ""
    ],
    [
      97,
      98,
      ""
    ],
    [
      98,
      99,
      ""
    ],
    [
      99,
      89,
      ""
    ],
    [
      100,
      101,
      ""
    ],
    [
      101,
      102,
      ""
    ],
    [
      102,
      103,
      "true"
    ],
    [
      102,
      104,
      "false"
    ],
    [
      103,
      104,
      ""
    ],
    [
      104,
      105,
      ""
    ]
  ],
  "total_blocks": 107,
  "total_edges": 143
}